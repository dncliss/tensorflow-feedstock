From 7d4c64c574b210e764cd6dd693f19318cca5e097 Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Tue, 8 Sep 2020 14:37:10 +0000
Subject: [PATCH] Fix conda build on x86 opence container

---
 third_party/gpus/cuda_configure.bzl | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl
index a192c02..3dddc24 100644
--- a/third_party/gpus/cuda_configure.bzl
+++ b/third_party/gpus/cuda_configure.bzl
@@ -51,6 +51,7 @@ load(
     "read_dir",
     "realpath",
     "which",
+    "files_exist",
 )
 
 _GCC_HOST_COMPILER_PATH = "GCC_HOST_COMPILER_PATH"
@@ -329,6 +330,30 @@ def auto_configure_fail(msg):
 
 # END cc_configure common functions (see TODO above).
 
+# TODO: Below code isn't tested with platforms other than linux ppc64le and x86_64
+def _get_cuda_extra_target_path(repository_ctx, cuda_config): 
+    cuda_extra_path = ""
+    if cuda_config.cpu_value == "Linux":
+        os_name = "linux"
+
+    cpu = "x86_64"
+    machine_type = repository_ctx.execute(["bash", "-c", "uname -p"]).stdout
+    if (machine_type.startswith("ppc") or
+        machine_type.startswith("powerpc")):
+        cpu = "ppc64le"
+    elif machine_type.startswith("s390x"):
+        cpu = "s390x"
+    elif machine_type.startswith("aarch64"):
+        cpu = "aarch64"
+    elif machine_type.startswith("arm"):
+        cpu = "arm"
+    
+    extra_path = cuda_config.cuda_toolkit_path + "/targets/" + cpu + "-" + os_name + "/include"
+    if files_exist(repository_ctx, [extra_path]) == [True]:
+        cuda_extra_path = realpath(repository_ctx, extra_path)
+    
+    return cuda_extra_path
+   
 def _cuda_include_path(repository_ctx, cuda_config):
     """Generates the Starlark string with cuda include directories.
 
@@ -361,6 +386,10 @@ def _cuda_include_path(repository_ctx, cuda_config):
     if target_dir != "":
         inc_entries.append(realpath(repository_ctx, target_dir))
     inc_entries.append(realpath(repository_ctx, cuda_config.cuda_toolkit_path + "/include"))
+
+    extra_cuda_path = _get_cuda_extra_target_path(repository_ctx, cuda_config)
+    if extra_cuda_path != "":
+        inc_entries.append(extra_cuda_path)
     return inc_entries
 
 def enable_cuda(repository_ctx):
-- 
1.8.3.1

